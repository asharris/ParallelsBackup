; Example Configuration for backupParallels
;
; This file can either be ~/.backupParallels.ini
; or /etc/backupParallels.ini (~/.backupParrallels is looked for first
; and if found is used.

[main]
; StatusDirectory is where information is stored about
; the last backup number and the total uptime of the VM
; This directory must exist and be re-write for the user
StatusDirectory = ~/Parallels/.ParallelsStatus

; The location of prlctl used to get the VM status's
prlctl = /usr/local/bin/prlctl

; Where is tar
tar = /usr/bin/tar

; How many backups should be kept. Once this number is reached
; old backups are overwritten
backupRotations = 3

; Before Backup and After backup are commands to be run before the whole backup process
; starts and after all backup processes have completed
; Preceding a command with a '-' stops the command itself being
; echoed in the output, which is useful if passwords are included
; in the command and preceding the command with a '+' simply echos the rest of the line
BeforeBackup = ~/bin/CommandToRunBeforeANYOfTheBackupsStarts
AfterBackup = ~/bin/CommandToRunAfterALLBackupHaveFinished


; SCP is used to copy the compressed file to the destination
; Multiple destinations can be listed. They will be run
; simultaneously
[scp]
destinations = <user>@<destination>:~/<destination folder>
               <user>@<destination2>:~/<destination folder>

; These are various options for compressing the generated
; tar file. The one to use depends on what is available on
; the machine doing the backup - and which works best and
; depends on compression level and speed.
; Of those below, only xz is multi threaded (at the moment)
; and will use all cores on the machine.

[compression]
;program = /usr/bin/gzip
;compressedExtension = gz
;arguments = -f

;program = /opt/homebrew/bin/lz4
;compressedExtension = lz4
;arguments = -rm -q -z -1 -f

program = /opt/homebrew/bin/xz
compressedExtension = xz
arguments = -4 -T0 -f 

;program = /usr/bin/bzip2
;compressedExtension = bz2
;arguments = -1 -f 

; For each VM, a list of BEFORE and After commands can be provided
; These are run BEFORE the VM is suspended and
; AFTER the VM has been resumed. They are only
; run if the VM was found to be running
; Preceding a command with a '-' stops the command itself being
; echoed in the output, which is useful if passwords are included
; in the command and preceding the command with a '+' simply echos the rest of the line
[Debian OOH]
BeforeSuspend = killall Electron
        	diskutil unmount force /Volumes/<mount> &
		-sleep 5
		umount -f /Volumes/<mount> 2>/dev/null &
		-sleep 5

AfterResume =   +Mounting /Volumes/<mount>
		-osascript -e 'mount volume "smb://<user>:<password>@debian/<mount>"' &
                -sleep 5
       	        open -a 'Visual Studio Code.app' /Volumes/<mount>
		-sleep 2

[Debian RFQ]
BeforeSuspend = diskutil unmount force /Volumes/<mount 2>
		unmount -f /Volumes/<mount 2> 2>/dev/null

AfterResume =   osascript -e 'mount volume "smb://q<user>:<password>@move-rfq/<mount 2>"'

